<?xml version="1.0"?>

<!--
 ~ Copyright: (c) 2008-2010 Gemini Mobile Technologies, Inc.  All rights reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~     http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
 -->

<project name="cdr_cassandra" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- all the paths stuff -->
  <property name="dist.name" value="cdr_logprocessing"/>
  <property name="dist.version" value="0.1"/>
  <property name="dist.jar" value="${dist.name}-${dist.version}.jar"/>
  <property name="basedir" value="."/>
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.dir.classes" value="${build.dir}/classes"/>
  <property name="build.dir.lib" value="${build.dir}/lib"/>
  <property name="docs.dir" location="${basedir}/docs"/>
  <property name="src.dir" value="${basedir}/src"/>
  <property name="src.java.dir" value="${src.dir}/java"/>
  <property name="test.dir" value="${basedir}/test"/>
  <property name="test.dir.classes" value="${test.dir}/classes"/>
  <property name="test.dir.var" value="${test.dir}/var"/>
  <property name="conf.dir" value="${basedir}/conf"/>
  <property name="thirdparty.jars" value="${build.dir.lib}/jars"/>
  <property name="no_marven.lib" value="${basedir}/lib"/>
  <property name="resources.dir" value="${basedir}/resources"/>

  <!-- system variables -->
  <property environment="env"/>
  <property name="javac.debug" value="on"/>
  <property name="ivy.version" value="2.1.0" />
  <property name="ivy.url"
            value="http://repo2.maven.org/maven2/org/apache/ivy/ivy" />

  <!-- some simple true-n-false checks -->
  <condition property="ivy.jar.exists">
    <available file="${build.dir}/ivy-${ivy.version}.jar" />
  </condition>


  <!-- classpaths -->
  <path id="autoivy.classpath">
     <fileset dir="${build.dir.lib}">
       <include name="**/*.jar" />
     </fileset>
     <pathelement location="${build.dir}/ivy-${ivy.version}.jar"/>
  </path>

  <path id="logprocessing.classpath">
    <fileset dir="${thirdparty.jars}">
      <include name="**/*.jar"/>
    </fileset>

    <fileset dir="${no_marven.lib}">
      <include name="**/*.jar"/>
    </fileset>

    <pathelement location="${build.dir.classes}"/>
  </path>

  <!-- Fetch Ivy and dependencies -->
  <target name="ivy-download" unless="ivy.jar.exists">
    <echo>Downloading Ivy...</echo>
    <mkdir dir="${build.dir}" />
    <get src="${ivy.url}/${ivy.version}/ivy-${ivy.version}.jar"
         dest="${build.dir}/ivy-${ivy.version}.jar" usetimestamp="true" />
  </target>

  <target name="ivy-init" depends="ivy-download" unless="ivy.initialized">
    <mkdir dir="${build.dir.lib}"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant"
             classpathref="autoivy.classpath"/>
    <property name="ivy.initialized" value="true"/>
  </target>

  <target name="ivy-retrieve-build" depends="ivy-init">
    <ivy:retrieve type="jar" sync="true"
           pattern="${build.dir.lib}/[type]s/[artifact]-[revision].[ext]" />
  </target>

  <!-- compile the classes -->
  <target name="compile" depends="clean">
    <mkdir dir="${build.dir.classes}"/>

    <javac srcdir="${src.java.dir}"
           destdir="${build.dir.classes}"
           debug="${javac.debug}"
           includeantruntime="false">
			<classpath refid="logprocessing.classpath"/>
    </javac>
  </target>

  <target name="jar" depends="ivy-retrieve-build,compile">
    <jar jarfile="${dist.jar}"
         basedir="${build.dir.classes}"
    />

  </target>

  <target name="compile-test" depends="compile" description="Compile test classes">
    <mkdir dir="${test.dir.classes}"/>
    <javac srcdir="./src/test"
           destdir="${test.dir.classes}"
           debug="on"
           includeantruntime="false">
      <classpath refid="logprocessing.classpath"/>
    </javac>
  </target>

  <target name="clean">
    <echo message="Cleaning generated classes and jars"/>
    <delete dir="${build.dir.classes}" />
    <delete dir="${test.dir.classes}" />
    <delete file="${dist.jar}" />
  </target>

  <target name="deepclean" depends="clean">
    <delete dir="${build.dir}" />
    <delete dir="${docs.dir}"/>
    <delete dir="${test.dir}" />
    <delete file="${dist.name}-${dist.version}.tar.gz" />
  </target>

  <target name="docs" description="generate javadoc " >
    <mkdir dir="${docs.dir}"/>
    <javadoc destdir="${docs.dir}" sourcepath="${src.java.dir}">
    </javadoc>
  </target>

       <target name="release" depends="jar">
                <tar destfile="${dist.name}-${dist.version}.tar.gz" compression="gzip">
                        <tarfileset dir="." prefix="cdrplugin/lib">
                                <include name="${dist.jar}"/>
                        </tarfileset>
                        <tarfileset dir="${thirdparty.jars}" prefix="cdrplugin/lib">
                                <include name="hector*"/>
                                <include name="log4j*"/>
                                <include name="slf4*"/>
                                <include name="jug-*"/>
                                <include name="avro*"/>
                                <include name="apache-cassandra*"/>
                                <include name="commons-*"/>
                                <include name="high-scale-lib-*"/>
                                <include name="perf4j-*"/>
                        </tarfileset>
                </tar>
  </target>
</project>
